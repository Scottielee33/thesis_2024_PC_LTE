quantile_data$Fit_Values <- fit_values
combined_plot <- combined_plot +
geom_line(data = quantile_data, aes(x = ReleaseYear, y = Fit_Values, color = as.factor(Quantile)))
}
# Customize the combined plot
combined_plot <- combined_plot +
ggtitle("Exponential Decay Fit for Different Quantiles") +
xlab("Year") +
ylab("Average Performance Score") +
scale_color_discrete(name = "Quantile")
# Print the combined plot
print(combined_plot)
# Load the data
data <- read.csv('../final_data/CPU.csv')
# Extract year from ReleaseDate and calculate total Score
data$ReleaseYear <- as.numeric(format(as.Date(data$ReleaseDate, format = "%Y-%m-%d"), "%Y"))
# Aggregate data by year and quantile
agg_data_quantile <- data %>%
group_by(ReleaseYear, Quantile) %>%
summarise(Avg_Score = mean(Score, na.rm = TRUE)) %>%
ungroup()
# Define the exponential decay function
exp_decay <- function(t, P0, lambda) {
P0 * exp(-lambda * t)
}
# Function to calculate lambda for each quantile
calculate_lambda_for_quantile <- function(quantile_data) {
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
performance <- quantile_data$Avg_Score
# Fit the model using non-linear least squares
start_params <- list(P0 = max(performance), lambda = 0.1)
fit <- nlsLM(performance ~ P0 * exp(-lambda * t), start = start_params, data = data.frame(t, performance))
lambda <- coef(fit)["lambda"]
return(lambda)
}
# Calculate lambda for each quantile
quantiles <- unique(agg_data_quantile$Quantile)
lambda_values <- sapply(quantiles, function(quantile) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
calculate_lambda_for_quantile(quantile_data)
})
names(lambda_values) <- quantiles
cpu_lambda_values <- lambda_values
# Print lambda values
print(lambda_values)
# Create a combined plot
combined_plot <- ggplot()
# Add data and fits for each quantile
for (quantile in quantiles) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
lambda <- lambda_values[quantile]
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
fit_values <- exp_decay(t, max(quantile_data$Avg_Score), lambda)
# Add fit values to quantile_data
quantile_data$Fit_Values <- fit_values
combined_plot <- combined_plot +
geom_line(data = quantile_data, aes(x = ReleaseYear, y = Fit_Values, color = as.factor(Quantile)))
}
# Customize the combined plot
combined_plot <- combined_plot +
ggtitle("Exponential Decay Fit for Different Quantiles") +
xlab("Year") +
ylab("Average Performance Score") +
scale_color_discrete(name = "Quantile")
# Print the combined plot
print(combined_plot)
# Load the data
data <- read.csv('../final_data/disk.csv')
data <- data %>%
mutate(ReleaseDate = as.Date(ReleaseDate)) %>%
filter(ReleaseDate >= as.Date("2019-01-01"))
# Extract year from ReleaseDate and calculate total Score
data$ReleaseYear <- as.numeric(format(as.Date(data$ReleaseDate, format = "%Y-%m-%d"), "%Y"))
# Aggregate data by year and quantile
agg_data_quantile <- data %>%
group_by(ReleaseYear, Quantile) %>%
summarise(Avg_Score = mean(Score, na.rm = TRUE)) %>%
ungroup()
# Define the exponential decay function
exp_decay <- function(t, P0, lambda) {
P0 * exp(-lambda * t)
}
# Function to calculate lambda for each quantile
calculate_lambda_for_quantile <- function(quantile_data) {
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
performance <- quantile_data$Avg_Score
# Fit the model using non-linear least squares
start_params <- list(P0 = max(performance), lambda = 0.1)
fit <- nlsLM(performance ~ P0 * exp(-lambda * t), start = start_params, data = data.frame(t, performance))
lambda <- coef(fit)["lambda"]
return(lambda)
}
# Calculate lambda for each quantile
quantiles <- unique(agg_data_quantile$Quantile)
lambda_values <- sapply(quantiles, function(quantile) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
calculate_lambda_for_quantile(quantile_data)
})
names(lambda_values) <- quantiles
# Print lambda values
print(lambda_values)
disk_lambda_values <- lambda_values
# Create a combined plot
combined_plot <- ggplot()
# Add data and fits for each quantile
for (quantile in quantiles) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
lambda <- lambda_values[quantile]
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
fit_values <- exp_decay(t, max(quantile_data$Avg_Score), lambda)
# Add fit values to quantile_data
quantile_data$Fit_Values <- fit_values
combined_plot <- combined_plot +
geom_line(data = quantile_data, aes(x = ReleaseYear, y = Fit_Values, color = as.factor(Quantile)))
}
# Customize the combined plot
combined_plot <- combined_plot +
ggtitle("Exponential Decay Fit for Different Quantiles") +
xlab("Year") +
ylab("Average Performance Score") +
scale_color_discrete(name = "Quantile")
# Print the combined plot
print(combined_plot)
# Load the data
data <- read.csv('../final_data/memory.csv')
# Extract year from ReleaseDate and calculate total Score
data$ReleaseYear <- as.numeric(format(as.Date(data$ReleaseDate, format = "%Y-%m-%d"), "%Y"))
# Aggregate data by year and quantile
agg_data_quantile <- data %>%
group_by(ReleaseYear, Quantile) %>%
summarise(Avg_Score = mean(Score, na.rm = TRUE)) %>%
ungroup()
# Define the exponential decay function
exp_decay <- function(t, P0, lambda) {
P0 * exp(-lambda * t)
}
# Function to calculate lambda for each quantile
calculate_lambda_for_quantile <- function(quantile_data) {
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
performance <- quantile_data$Avg_Score
# Fit the model using non-linear least squares
start_params <- list(P0 = max(performance), lambda = 0.1)
fit <- nlsLM(performance ~ P0 * exp(-lambda * t), start = start_params, data = data.frame(t, performance))
lambda <- coef(fit)["lambda"]
return(lambda)
}
# Calculate lambda for each quantile
quantiles <- unique(agg_data_quantile$Quantile)
lambda_values <- sapply(quantiles, function(quantile) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
calculate_lambda_for_quantile(quantile_data)
})
names(lambda_values) <- quantiles
memory_lambda_values <- lambda_values
# Print lambda values
print(lambda_values)
# Create a combined plot
combined_plot <- ggplot()
# Add data and fits for each quantile
for (quantile in quantiles) {
quantile_data <- filter(agg_data_quantile, Quantile == quantile)
lambda <- lambda_values[quantile]
t <- quantile_data$ReleaseYear - min(quantile_data$ReleaseYear)
fit_values <- exp_decay(t, max(quantile_data$Avg_Score), lambda)
# Add fit values to quantile_data
quantile_data$Fit_Values <- fit_values
combined_plot <- combined_plot +
geom_line(data = quantile_data, aes(x = ReleaseYear, y = Fit_Values, color = as.factor(Quantile)))
}
# Customize the combined plot
combined_plot <- combined_plot +
ggtitle("Exponential Decay Fit for Different Quantiles") +
xlab("Year") +
ylab("Average Performance Score") +
scale_color_discrete(name = "Quantile")
# Print the combined plot
print(combined_plot)
cpu_lambda_values <- as.data.frame(cpu_lambda_values)
cpu_lambda_values <- as.data.frame(t(cpu_lambda_values))
gpu_lambda_values <- as.data.frame(gpu_lambda_values)
gpu_lambda_values <- as.data.frame(t(gpu_lambda_values))
disk_lambda_values <- as.data.frame(disk_lambda_values)
disk_lambda_values <- as.data.frame(t(disk_lambda_values))
memory_lambda_values <- as.data.frame(memory_lambda_values)
memory_lambda_values <- as.data.frame(t(memory_lambda_values))
cpu_lambda_values <- abs(as.data.frame(cpu_lambda_values))
gpu_lambda_values <- abs(as.data.frame(gpu_lambda_values))
disk_lambda_values <- abs(as.data.frame(disk_lambda_values))
memory_lambda_values <- abs(as.data.frame(memory_lambda_values))
lambda_values <- rbind(cpu_lambda_values, gpu_lambda_values, disk_lambda_values, memory_lambda_values)
rownames(lambda_values) <- NULL
lambda_values["Component"] <- c("CPU", "GPU", "Disk", "Memory")
write.csv(lambda_values, file = "lambda_values.csv", row.names = FALSE)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("nloptr")) install.packages("nloptr")
if (!require("data.table")) install.packages("data.table")
if (!require("dplyr")) install.packages("dplyr")
if (!require("lubridate")) install.packages("lubridate")
# Load data
cpu_data <- fread('../final_data/CPU.csv')
gpu_data <- fread('../final_data/GPU.csv')
disk_data <- fread('../final_data/Disk.csv')
memory_data <- fread('../final_data/Memory.csv')
# Add ReleaseYear column
cpu_data$ReleaseYear <- year(ymd(cpu_data$ReleaseDate))
gpu_data$ReleaseYear <- year(ymd(gpu_data$ReleaseDate))
disk_data$ReleaseYear <- year(ymd(disk_data$ReleaseDate))
memory_data$ReleaseYear <- year(ymd(memory_data$ReleaseDate))
# Calculate averages for each quantile and release year
calculate_averages <- function(data) {
data %>%
group_by(Quantile, ReleaseYear) %>%
summarise(
Avg_Release_Price = mean(AdjustedReleasePrice, na.rm = TRUE),
Avg_Score = mean(Score, na.rm = TRUE)
) %>%
ungroup()
}
gpu_calculate_averages <- function(data) {
data %>%
group_by(Quantile, ReleaseYear) %>%
summarise(
Avg_Release_Price = mean(AdjustedReleasePrice, na.rm = TRUE),
Avg_G2DScore = mean(G2DScore, na.rm = TRUE),
Avg_G3DScore = mean(G3DScore, na.rm = TRUE)
) %>%
ungroup()
}
cpu_averages <- calculate_averages(cpu_data)
gpu_averages <- gpu_calculate_averages(gpu_data)
disk_averages <- calculate_averages(disk_data)
memory_averages <- calculate_averages(memory_data)
gpu_averages$Avg_Score <- paste0(gpu_averages$Avg_G2DScore, ",", gpu_averages$Avg_G3DScore)
# Calculate averages for each quantile and release year
calculate_averages <- function(data) {
data %>%
group_by(Quantile, ReleaseYear) %>%
summarise(
Avg_Release_Price = mean(AdjustedReleasePrice, na.rm = TRUE),
Avg_Score = mean(Score, na.rm = TRUE)
) %>%
ungroup()
}
gpu_calculate_averages <- function(data) {
data %>%
group_by(Quantile, ReleaseYear) %>%
summarise(
Avg_Release_Price = mean(AdjustedReleasePrice, na.rm = TRUE),
Avg_G2DScore = mean(G2DScore, na.rm = TRUE),
Avg_G3DScore = mean(G3DScore, na.rm = TRUE)
) %>%
ungroup()
}
cpu_averages <- calculate_averages(cpu_data)
gpu_averages <- gpu_calculate_averages(gpu_data)
disk_averages <- calculate_averages(disk_data)
memory_averages <- calculate_averages(memory_data)
gpu_averages$Avg_Score <- paste0(gpu_averages$Avg_G2DScore, ",", gpu_averages$Avg_G3DScore)
performance_after_upgrade <- function(t, t_upgrade, perf_initial, lambda, perf_new) {
if (t < t_upgrade) {
perf <- perf_initial * exp(-lambda * t)
} else {
perf <- perf_new * exp(-lambda * (t - t_upgrade))
}
return(perf)
}
performance_after_upgrade(8, 6, 1000, 0.2, 1100)
# Function to read the lambda values from the dataset
read_lambdas <- function(file_path) {
lambdas <- read.csv(file_path)
names(lambdas) <- c("First Quantile", "Second Quantile", "Third Quantile", "Component")
return(lambdas)
}
# Function to get the lambda for a specific component and quantile
get_lambda <- function(lambdas, component, quantile) {
lambda_value <- lambdas %>%
filter(Component == component) %>%
select(all_of(quantile)) %>%
pull()
return(lambda_value)
}
lambdas <- read_lambdas("../statistical_analysis/lambda_values.csv")
PassMark_Rating_with_time_based_lambdas <- function(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, t, t_upgrade, perf_new, upgraded_component) {
CPU_lambda <- get_lambda(lambdas, "CPU", quantile)
TwoD_lambda <- get_lambda(lambdas, "GPU", quantile)
ThreeD_lambda <- get_lambda(lambdas, "GPU", quantile)
Memory_lambda <- get_lambda(lambdas, "Memory", quantile)
Disk_lambda <- get_lambda(lambdas, "Disk", quantile)
if (upgraded_component == "CPU") {
CPU_Rating <- performance_after_upgrade(t, t_upgrade, CPU_Rating, CPU_lambda, perf_new)
} else {
CPU_Rating <- CPU_Rating * exp(-CPU_lambda * t)
}
if (upgraded_component == "GPU") {
gpu_perf_new <- strsplit(as.character(perf_new), split = ",")[[1]]
TwoD_perf_new <- as.numeric(gpu_perf_new[1])
ThreeD_perf_new <- as.numeric(gpu_perf_new[2])
TwoD_Rating <- performance_after_upgrade(t, t_upgrade, TwoD_Rating, TwoD_lambda, TwoD_perf_new)
ThreeD_Rating <- performance_after_upgrade(t, t_upgrade, ThreeD_Rating, ThreeD_lambda, ThreeD_perf_new)
} else {
TwoD_Rating <- TwoD_Rating * exp(-TwoD_lambda * t)
ThreeD_Rating <- ThreeD_Rating * exp(-ThreeD_lambda * t)
}
if (upgraded_component == "Memory") {
Memory_Rating <- performance_after_upgrade(t, t_upgrade, Memory_Rating, Memory_lambda, perf_new)
} else {
Memory_Rating <- Memory_Rating * exp(-Memory_lambda * t)
}
if (upgraded_component == "Disk") {
Disk_Rating <- performance_after_upgrade(t, t_upgrade, Disk_Rating, Disk_lambda, perf_new)
} else {
Disk_Rating <- Disk_Rating * exp(-Disk_lambda * t)
}
CPU_factor <- 0.396566187
TwoD_factor <- 3.178718116
ThreeD_factor <- 2.525195879
Memory_factor <- 1.757085479
Disk_factor <- 1.668158805
rating <- 1 / ((1 / (CPU_Rating * CPU_factor) +
1 / (TwoD_Rating * TwoD_factor) +
1 / (ThreeD_Rating * ThreeD_factor) +
1 / (Memory_Rating * Memory_factor) +
1 / (Disk_Rating * Disk_factor)) / 5)
return(rating)
}
PassMark_Rating_with_time_based_lambdas(1000, 1000, 1000, 1000, 1000, lambdas, "Third Quantile", 3, 3, "1900,1500", "GPU")
average_performance <- function(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, time, t_upgrade, perf_new, upgraded_component) {
# Ensure time is numeric
time <- as.numeric(time)
# Generate a sequence of time points between 0 and the given time
time_points <- seq(0, time, length.out = 10)
# Calculate performance at each time point
performances <- sapply(time_points, function(t) {
PassMark_Rating_with_time_based_lambdas(
CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating,
lambdas, quantile, t, t_upgrade, perf_new, upgraded_component
)
})
# Calculate average performance
avg_performance <- mean(performances)
return(avg_performance)
}
average_performance(1000, 1000, 1000, 1000, 1000, lambdas, "First Quantile", 7, 5, "1300,1400", "GPU")
objective_function <- function(t_upgrade, CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, initial_avg_perf_no_upgrade, perf_new_values, initial_period, upgraded_component) {
perf_new <- get_perf_new(t_upgrade, perf_new_values)
extended_period <- initial_period
while (TRUE) {
avg_perf <- average_performance(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, extended_period, t_upgrade, perf_new, upgraded_component)
if (avg_perf < initial_avg_perf_no_upgrade) {
break
}
extended_period <- extended_period + 0.2  # Increased precision
}
return(-extended_period)  # Maximize the extended period
}
# Function to get the performance upgrade value based on the upgrade time
get_perf_new <- function(t_upgrade, perf_new_values) {
year <- ceiling(t_upgrade)
if (year > length(perf_new_values)) {
return(perf_new_values[length(perf_new_values)])
} else {
return(perf_new_values[year])
}
}
optimize_upgrade <- function(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, initial_period, perf_new_values, upgraded_component) {
initial_avg_perf_no_upgrade <- average_performance(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, initial_period, Inf, 0, upgraded_component)
cat("Average performance over the first", initial_period, "years without any upgrades:", initial_avg_perf_no_upgrade, "\n")
lb <- 0
ub <- initial_period
initial_guess <- initial_period / 2
objective_function_with_params <- function(t_upgrade) {
objective_function(t_upgrade, CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, initial_avg_perf_no_upgrade, perf_new_values, initial_period, upgraded_component)
}
result <- nloptr::nloptr(
x0 = initial_guess,
eval_f = objective_function_with_params,
lb = lb,
ub = ub,
opts = list(algorithm = "NLOPT_GN_ISRES", xtol_rel = 1e-6, maxeval = 100)
)
optimal_t_upgrade <- result$solution[1]
optimal_perf_new <- get_perf_new(optimal_t_upgrade, perf_new_values)
optimal_extended_period <- initial_period
while (TRUE) {
avg_perf <- average_performance(CPU_Rating, TwoD_Rating, ThreeD_Rating, Memory_Rating, Disk_Rating, lambdas, quantile, optimal_extended_period, optimal_t_upgrade, optimal_perf_new, upgraded_component)
if (avg_perf < initial_avg_perf_no_upgrade) {
break
}
optimal_extended_period <- optimal_extended_period + 0.2
}
return(list(optimal_t_upgrade = optimal_t_upgrade, optimal_extended_period = optimal_extended_period))
}
# Function to get starting performance and upgrade values
get_performance_and_upgrades <- function(averages_data, start_year, start_quantile) {
start_perf <- averages_data %>%
filter(ReleaseYear == start_year & Quantile == start_quantile) %>%
pull(Avg_Score)
upgrade_values <- averages_data %>%
filter(ReleaseYear >= start_year & Quantile == start_quantile) %>%
pull(Avg_Score)
upgrade_values <- upgrade_values[1:5]  # Get the 5 values after the first value
return(list(start_perf = start_perf, upgrade_values = upgrade_values))
}
run_optimization <- function(start_year, start_quantile, chosen_component) {
# Get starting performance and upgrade values for each component
cpu_perf <- get_performance_and_upgrades(cpu_averages, start_year, start_quantile)
gpu_perf <- get_performance_and_upgrades(gpu_averages, start_year, start_quantile)
disk_perf <- get_performance_and_upgrades(disk_averages, start_year, start_quantile)
memory_perf <- get_performance_and_upgrades(memory_averages, start_year, start_quantile)
# Set performance values for the chosen component
if (chosen_component == "CPU") {
perf_new_values <- cpu_perf$upgrade_values
} else if (chosen_component == "GPU") {
perf_new_values <- gpu_perf$upgrade_values
} else if (chosen_component == "Disk") {
perf_new_values <- disk_perf$upgrade_values
} else if (chosen_component == "Memory") {
perf_new_values <- memory_perf$upgrade_values
} else {
stop("Invalid component chosen")
}
cat("Perf Upgrade Values:", perf_new_values, "\n")
GPU_start_scores <- strsplit(as.character(gpu_perf$start_perf), ",")
CPU_factor <- 0.396566187
TwoD_factor <- 3.178718116
ThreeD_factor <- 2.525195879
Memory_factor <- 1.757085479
Disk_factor <- 1.668158805
# Calculate the total starting performance
total_starting_performance <- 1 / ((1 / (cpu_perf$start_perf * CPU_factor) +
1 / (as.numeric(GPU_start_scores[[1]][1]) * TwoD_factor) +
1 / (as.numeric(GPU_start_scores[[1]][2]) * ThreeD_factor) +
1 / (memory_perf$start_perf * Memory_factor) +
1 / (disk_perf$start_perf * Disk_factor)) / 5)
initial_period <- 5
cat("Total starting performance:", total_starting_performance, "\n")
cat("Chosen component for upgrade:", chosen_component, "\n")
result <- optimize_upgrade(cpu_perf$start_perf, as.numeric(GPU_start_scores[[1]][1]), as.numeric(GPU_start_scores[[1]][2]), memory_perf$start_perf, disk_perf$start_perf, lambdas, start_quantile, initial_period, perf_new_values, chosen_component)
optimal_t_upgrade <- result$optimal_t_upgrade
optimal_extended_period <- result$optimal_extended_period
cat("Optimal upgrade time:", format(optimal_t_upgrade, digits = 10), "years\n")
cat("Optimal extended period:", format(optimal_extended_period, digits = 10), "years\n")
}
run_optimization(2016, "Third Quantile", "GPU")
run_optimization(2016, "Third Quantile", "CPU")
# Initialize a dataframe to store the results
optimization_results <- data.frame(
Component = character(),
Quantile = character(),
StartYear = numeric(),
OptimalUpgradeTime = numeric(),
OptimalExtendedPeriod = numeric(),
stringsAsFactors = FALSE
)
# Function to run optimization for each component and quantile
run_optimization <- function(start_year, start_quantile, chosen_component) {
# Get starting performance and upgrade values for each component
cpu_perf <- get_performance_and_upgrades(cpu_averages, start_year, start_quantile)
gpu_perf <- get_performance_and_upgrades(gpu_averages, start_year, start_quantile)
disk_perf <- get_performance_and_upgrades(disk_averages, start_year, start_quantile)
memory_perf <- get_performance_and_upgrades(memory_averages, start_year, start_quantile)
# Set performance values for the chosen component
if (chosen_component == "CPU") {
perf_new_values <- cpu_perf$upgrade_values
} else if (chosen_component == "GPU") {
perf_new_values <- gpu_perf$upgrade_values
} else if (chosen_component == "Disk") {
perf_new_values <- disk_perf$upgrade_values
} else if (chosen_component == "Memory") {
perf_new_values <- memory_perf$upgrade_values
} else {
stop("Invalid component chosen")
}
GPU_start_scores <- strsplit(as.character(gpu_perf$start_perf), ",")
CPU_factor <- 0.396566187
TwoD_factor <- 3.178718116
ThreeD_factor <- 2.525195879
Memory_factor <- 1.757085479
Disk_factor <- 1.668158805
# Calculate the total starting performance
total_starting_performance <- 1 / ((1 / (cpu_perf$start_perf * CPU_factor) +
1 / (as.numeric(GPU_start_scores[[1]][1]) * TwoD_factor) +
1 / (as.numeric(GPU_start_scores[[1]][2]) * ThreeD_factor) +
1 / (memory_perf$start_perf * Memory_factor) +
1 / (disk_perf$start_perf * Disk_factor)) / 5)
initial_period <- 5
result <- optimize_upgrade(cpu_perf$start_perf, as.numeric(GPU_start_scores[[1]][1]), as.numeric(GPU_start_scores[[1]][2]), memory_perf$start_perf, disk_perf$start_perf, lambdas, start_quantile, initial_period, perf_new_values, chosen_component)
optimal_t_upgrade <- result$optimal_t_upgrade
optimal_extended_period <- result$optimal_extended_period
# Append the results to the dataframe
optimization_results <<- rbind(optimization_results, data.frame(
Component = chosen_component,
Quantile = start_quantile,
StartYear = start_year,
OptimalUpgradeTime = optimal_t_upgrade,
OptimalExtendedPeriod = optimal_extended_period,
stringsAsFactors = FALSE
))
}
# Run optimization for each component and quantile from 2014 to 2017
years <- 2014:2017
quantiles <- c("First Quantile", "Second Quantile", "Third Quantile")
components <- c("CPU", "GPU", "Disk", "Memory")
for (year in years) {
for (quantile in quantiles) {
for (component in components) {
run_optimization(year, quantile, component)
}
}
}
# Save the results to a CSV file
write.csv(optimization_results, "optimization_results.csv", row.names = FALSE)
